<!-- views/questionPanel.ejs -->

<%- include('partials/header') %>


<div class="container mt-5">
  <div class="signBox">
    <h4 class="text-warning"><i class="fa-solid fa-square-poll-vertical"></i> <%= voteSession.title %></h4>
    <div class="card mt-5 bg-dark controlPanelCodeBox" style="width: 40rem;">
      <div class="card-body">
        <% if (voteSession && voteSession.questions.length > 0) { %>
          <% const currentQuestion = voteSession.questions[voteSession.voteFlag]; %>
          <h4 class="card-title">
            <span class="text-warning">Question <%= currentQuestion.questionNumber %>:</span> <%= currentQuestion.questionText %>
          </h4>
          <% const questionVoteCounts = voteCounts[currentQuestion.questionNumber]; %>
          <% let totalVotes = 0; %>
          <% currentQuestion.options.forEach(function(option) { %>
            <% totalVotes += questionVoteCounts[option] || 0; %>
          <% }); %>




          <h5 class="card-text">
            <span class="text-light">
              <form action="/organizer/dashboard/questionPanel/<%= voteSession._id %>" method="POST">
                <div class="w-100">
                  <% currentQuestion.options.forEach(function(option, index) { %>
                    <% const count = questionVoteCounts[option] || 0; %>
                    <% const percentage = totalVotes > 0 ? (count / totalVotes) * 100 : 0; %>
                    <div class="option-container mb-2">
                      <div class="option-text text-light">
                        <%= option %> (<span class="text-info"><%= count %> vote<%= count !== 1 ? 's' : '' %></span>)
                      </div>
                      <div class="progress">
                        <div class="progress-bar bg-warning progress-bar-striped progress-bar-animated" role="progressbar" style="width: <%= percentage %>%;" aria-valuenow="<%= percentage %>" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </div>
                  <% }); %>
                </div>
                <button type="submit" name="action" value="reveal" class="btn mt-3 w-25
                  <% if (revealFlag) { %>
                    btn-info active
                  <% } else { %>
                    btn-outline-info
                  <% } %>"
                  <% if (revealFlag) { %> disabled <% } %>>
                  Reveal
                </button>
                <button type="submit" name="action" value="next" class="btn btn-outline-warning mt-3 w-25">Next</button>
              </form>
            </span>
          </h5>



          
        <% } else { %>
          <h4 class="card-title">No questions available</h4>
        <% } %>
      </div>
    </div>

        <!-- Vote submission tracker -->
        <h5 class="mt-5 text-warning">Participants:</h5>
        <div class="participant-list">
          <% Object.values(participantsVoteStatus).forEach(function(participant) { %>
            <button type="button" class="btn btn-outline-light mb-2 participant-button
              <% if (participant.hasVoted) { %> active <% } %>">
              <%= participant.name %> <%= participant.emoji %>
            </button>
          <% }); %>
        </div>

  </div>
</div>







<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  
  // Join the session room
  socket.emit('joinRoom', { room: 'session_<%= voteSession.code %>' });

  // Listen for voteSubmitted event
  socket.on('voteSubmitted', (data) => {

    // Find the participant button and update its status
    const participantButtons = document.querySelectorAll('.participant-button');
    participantButtons.forEach((button) => {
      if (button.textContent.trim().includes(data.participantName)) {
        button.classList.add('active');
      }
    });




    const optionContainers = document.querySelectorAll('.option-container');

    let totalVotes = 0;

    // Update the vote count for each option and calculate the new total votes
    optionContainers.forEach(container => {
      const optionText = container.querySelector('.option-text').innerText.trim();
      const countElement = container.querySelector('.text-info');
      let count = parseInt(countElement.innerText.split(' ')[0]);

      // Check if the current option is the submitted one
      if (optionText.startsWith(data.selectedOption)) {
        count += 1; 
        countElement.innerText = `${count} vote${count !== 1 ? 's' : ''}`;
      }

      totalVotes += count;
    });

    // Update the progress bars based on the new percentages
    optionContainers.forEach(container => {
      const countElement = container.querySelector('.text-info');
      const progressBar = container.querySelector('.progress-bar');
      const count = parseInt(countElement.innerText.split(' ')[0]);
      const percentage = totalVotes > 0 ? (count / totalVotes) * 100 : 0;

      // Update the width of the progress bar
      progressBar.style.width = `${percentage}%`;
      progressBar.setAttribute('aria-valuenow', percentage);
    });
  });

  socket.on('nextQuestion', (data) => {
  // Reset participant buttons
  const participantButtons = document.querySelectorAll('.participant-button');
  participantButtons.forEach((button) => {
    button.classList.remove('active');
  });

});
</script>




<%- include('partials/footer') %>
